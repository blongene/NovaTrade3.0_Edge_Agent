# render.yaml â€” NovaTrade 3.x unified deploy (bus + edge)

services:
  # --- Cloud orchestrator (the "bus") ---------------------------------------
  - type: web
    name: novatrade-bus
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: bash start.sh
    envVars:
      - key: OUTBOX_DB_PATH
        value: /data/outbox.db
      - key: OUTBOX_SECRET
        value: ${OUTBOX_SECRET}      # set in Blueprint vars or later in the Dashboard
      - key: EDGE_SECRET
        value: ${OUTBOX_SECRET}
      - key: OUTBOX_AGENT_ALLOW
        value: edge-cb-1
      - key: REQUIRE_HMAC_PULL
        value: "1"
      - key: REQUIRE_HMAC_OPS
        value: "1"
      - key: OUTBOX_LEASE_S
        value: "120"
      - key: RUN_BOOT_IN_WSGI
        value: "1"
      - key: RUN_WEBHOOK_IN_MAIN
        value: "0"
      - key: SHEET_URL
        value: ${SHEET_URL}
      - key: GOOGLE_CREDS_JSON_PATH
        value: sentiment-log-service.json
    plan: starter
    autoDeploy: true
    disk:
      name: outbox-data
      mountPath: /data
      sizeGB: 1
    # (optional) deliver the Google service-account JSON as a secret file:
    files:
      - name: sentiment-log-service.json
        contents: ${GOOGLE_CREDS_JSON_B64}   # base64 of the JSON (see notes below)
        encoding: base64

  # --- Edge Agent (background worker) --------------------------------------
  - type: worker
    name: novatrade-edge
    env: docker
    dockerfilePath: Dockerfile.edge
    envVars:
      - key: CLOUD_BASE_URL
        value: https://novatrade-bus.onrender.com
      - key: AGENT_ID
        value: edge-cb-1
      - key: EDGE_SECRET
        value: ${OUTBOX_SECRET}
      - key: EDGE_MODE
        value: dryrun
      - key: EDGE_HOLD
        value: "false"
      - key: EDGE_POLL_SECS
        value: "10"
      # Exchange creds (fill as needed)
      - key: COINBASE_API_KEY
        value: ${COINBASE_API_KEY}
      - key: COINBASE_API_SECRET
        value: ${COINBASE_API_SECRET}   # base64 secret from Coinbase Advanced
      - key: BINANCEUS_API_KEY
        value: ${BINANCEUS_API_KEY}
      - key: BINANCEUS_API_SECRET
        value: ${BINANCEUS_API_SECRET}
      - key: KRAKEN_KEY
        value: ${KRAKEN_KEY}
      - key: KRAKEN_SECRET
        value: ${KRAKEN_SECRET}         # base64 secret
    plan: starter
